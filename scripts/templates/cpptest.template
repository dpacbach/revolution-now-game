/****************************************************************
**{{FILEE}}
*
* Project: Revolution Now
*
* Created by {{NAME}} on {{YEAR}}-{{MONTH}}-{{DATE}}.
*
* Description: Unit tests for the src/{{FILE}}.* module.
*
*****************************************************************/
#include "test/testing.hpp"

// Under test.
#include "src/{{FILE}}.hpp"

// Revolution Now
#include "src/lua.hpp" // FIXME: remove if not needed.

// Must be last.
#include "test/catch-common.hpp"

// FMT_TO_CATCH( ::rn::UnitId );

namespace rn {
namespace {

using namespace std;

using Catch::Contains;

TEST_CASE( "[{{FILE}}] some test" ) {
  int x = 4;
  REQUIRE( x == 4 );

  SECTION( "even" ) { REQUIRE( x % 2 == 0 ); }

  SECTION( "non negative" ) { REQUIRE( x >= 0 ); }
}

TEST_CASE( "[{{FILE}}] lua bindings" ) {
  auto script = R"(
    local x = 5+6
  )";
  REQUIRE( lua::run<void>( script ).valid() );

  script = R"(
    local x =
  )";

  auto xp = lua::run<void>( script );
  REQUIRE( !xp.has_value() );
  REQUIRE_THAT( xp.error().what,
                Contains( "unexpected symbol" ) );

  script = R"(
    return 5+8.5
  )";
  REQUIRE( lua::run<double>( script ) == 13.5 );
}

} // namespace
} // namespace rn
