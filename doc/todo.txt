=================================================================
State
=================================================================

  - fsm module. Need a good generic finite state machine
    infrastructure since much of the game will probably turn out
    to be fsm's. Known fsm's in the game already:

      - Drag & Drop framework.
      - Music player state.
      - Overall program state (loading, intro, game, etc.).
      - Game state.
      - UI state (e.g. menu state).
      - Input state (such as low level drag state).
      - Unit state (orders, etc.).

    The state held by a state machine needs to be serializable
    (where applicable).  Need to list out all the requirements
    of a state machine and try to support all of them.

  - Need to restructure the architecture of the game so to work
    based on fsm's.

  - C++ serialization.  Candidates:

      - protobuf.
      - boost serialization.
      - custom solution.
      - ucl

  - Game State. Once serialization is figured out, we need to
    create a centralized game state data structure that can be
    serialized. This is not to be confused with a state machine;
    this is just a serializable data structure that holds the
    game state, which will include some finite state machines
    within it.

=================================================================
Bugs
=================================================================

Low priority:

  - When we toggle from fullscreen to non-fullscreen the mouse
    position is a bit off. This is probably some kind of SDL
    issue where the window thinks that it is in a different posi-
    tion than where it is displayed on screen (off by about 10-20
    pixels). As soon as the window position is moved slightly (by
    dragging) then it is observed to self-correct. Somehow, after
    restoring the window, we need to tell the window to update
    itself.

=================================================================
Infrastructure
=================================================================

  - Add a generic texture cache to the cache module that can
    cache textures. It will also support pruning and/or automatic
    regeneration.

  - Allow ADT to compare the variant type with a subttype using
    the == operator.

  - Replace better enums with magic enums where possible.

  - Add a cache to the cache module that invalidates when the
    scaling is changed. This may not be necessary since, as of
    now, it seems possible to write code that will work and ad-
    just to any scale.

=================================================================
UI
=================================================================

  - Escape cancels Ok/Cancel windows.
  - Minimap

=================================================================
Rendering
=================================================================

  - Fix handling of multiple units on a square with rendering.

  - Draw the popup window background consisting of a wood texture
    and a cloth sign hanging from the top with the title (this
    will be common to all windows), and then have a view that
    does the word-wrapped/markup text in the middle.

  - Animate water by sliding the pixels within each water sprite
    in a given direction (and wrapping around). This is essen-
    tially rotating the pixels, but rotating about an axis that
    is within the plane of the screen. Either this, or find an-
    other way to animate it.

=================================================================
Basic Game Mechanics
=================================================================

  - Fix handling of multiple units on a square with combat.
  - Finish ship combat

  List of basic game mechanics:

    * All Units

        x sentry
        - goto
        x wait / forfeight
        x moving to friendly squares
        x click on unit to clear orders / open orders window.
        x disband

    * Land Units

        x fortifying
        x military unit attacking military unit
        x military unit attacking civilian
        - military unit attacking trade wagon / treasure
        - unit moving into lost city

    * Ships

        - ship attacking ship (evade, damage, sink)
        - privateer stealth

    * Land Units + Ships

        x ship holding units
        x land unit boarding ship
        x landfall
        - treasure boarding ship

=================================================================
Game Save / Replay
=================================================================

  - data structure to hold game state

=================================================================
Old World View
=================================================================

  - Determine layout of europe background image
  - high seas
  - player gold
  - tax rate
  - old world view
  - unit immigration
  - purchasing units

=================================================================
Frame Control / Animations
=================================================================

  - Create an animation module that handles managing elapsed time
    for animations and scrolling so that the feel of the inter-
    face will not change with framerate.

=================================================================
Cargo
=================================================================

  - ship can hold cargo
  - europe sells cargo

=================================================================
Terrain
=================================================================

  - movement affected by terrain
  - pioneer plow
  - pioneer road

=================================================================
Colonies
=================================================================

  - Determine layout of europe background image

=================================================================
Game Narrative
=================================================================

  - game year/season
  - royal army

=================================================================
Graphics Engine
=================================================================

  - Looks like we are creating textures with
    SDL_TEXTUREACCESS_TARGET; see if removing this from the
    sprites speeds up copying.

  - Remove color palette from config, generate a new palette data
    structure with a uniform distribution of hues/sats/lums. Kind
    of rediculous to have the palette in a ucl file.

=================================================================
Build System
=================================================================

  - Add Windows support.

=================================================================
Testing
=================================================================

  - Add a fuzz tester and fuzz test the markup parser
