# ===============================================================
# sg-units.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-02-12.
#
# Description: RDS definitions for the units save game state.
#
# ===============================================================
# Revolution Now
include "colony-id.hpp"
include "coord.hpp"
include "unit-id.hpp"
include "unit.hpp"

# C++ standard library
include "<unordered_map>"

namespace "rn"

sumtype.PortStatus {
  # For ships that are venturing to europe. `percent` starts from
  # 0 and goes to 1.0 at arrival. This means that the value
  # should never actually assume a value of 1.0, because as soon
  # as it does, the state is transitioned to in_port.
  outbound {
    percent 'double',
  },

  # For ships that are traveling from europe to the new world.
  # `percent` starts from 0 and goes to 1.0 at arrival. This
  # means that the value should never actually assume a value of
  # 1.0, because as soon as it does, the state is transitioned to
  # the map.
  inbound {
    percent 'double',
  },

  # If a ship is in this state then it is in port (shown in the
  # "in port" box) whereas for land units this means that they
  # are on the dock.
  in_port {},

  _features { equality, validation }
}

struct.UnitHarborViewState {
  port_status 'PortStatus_t',

  # This field is only relevant if the unit is a ship, in which
  # case it specifies the square which the unit will be placed on
  # when it eventually makes its way back to the new world. If it
  # sailed to europe from the new world then this will hold the
  # (sea lane) square that it sailed from (not the destination
  # square but the source square, since the destination square
  # might not exist if the unit moved off the edge of the map).
  # On the other hand if the ship ended up in europe without
  # having sailed there (possibly because it was purchased there
  # or it was damaged and was transported there) then the game
  # will apply some rules to determine a suitable coordinate. The
  # original game will use the sea lane square of the most recent
  # ship that sailed to europe (regardless of which side of the
  # map it was on). Finally, if no ships have ever sailed to eu-
  # rope, then this would be the starting position.
  sailed_from 'Coord',
}

sumtype.UnitOwnership {
  free {},
  world {
    coord 'Coord',
  },
  cargo {
    holder 'UnitId',
  },
  harbor {
    st 'UnitHarborViewState',
  },
  colony {
    id 'ColonyId',
  },
}

struct.UnitState {
  unit 'Unit',
  ownership 'UnitOwnership_t',
}

namespace "rn.wrapped"

struct.UnitsState {
  next_unit_id 'int',
  units 'std::unordered_map<UnitId, UnitState>',

  _features { equality, validation }
}
