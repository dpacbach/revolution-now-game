# ===============================================================
# market.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-08-23.
#
# Description: Rds definitions for the ss/market module.
#
# ===============================================================
# ss
include "ss/commodity.rds.hpp"

# refl
include "refl/enum-map.hpp"

namespace "rn"

# Per-player per-commodity market state. In the OG the bid/ask
# spread is fixed for each commodity. That is the reason that we
# don't have the ask price here, since those can always be de-
# rived from the bid price.
struct.PlayerMarketItem {
  # This is the current bid price in hundreds. This has to be
  # stored on its own since in general it cannot be derived from
  # the state of the price model at any given time, since the
  # game has a rule where the price can only move one unit per
  # turn. The idea is that we use one of the models to compute a
  # target price each turn, and then we increment or decrement
  # this current price once per turn until it hits the target.
  bid_price 'int',

  # This is an internal model variable that is used by the de-
  # fault price model and represents a kind of volume. It evolves
  # as part of the model of price movement. Although it is not
  # directly visible or meaningful to the player, is influenced
  # by the quantities traded by the player; it is also influenced
  # by attrition/volatility and other model parameters, as well
  # as the trading activity of other nations.
  intrinsic_volume 'int',

  # The net amount that the player has traded. This is used by
  # the price-group model to evolve the price, and is also used
  # in general to display trading volume stats to the player, be-
  # cause it always strictly holds the net amount that the player
  # has traded to date. Note that this is not affected by the
  # "volatility" parameter.
  player_traded_volume 'int',

  # Is there an active boycott on this commodity.
  boycott 'bool',

  _features { equality, validation }
}

# Per-commodity market state shared by all players.
struct.GlobalMarketItem {
  # This is used only by the price-group model. The OG appears to
  # evolve those prices using a single set of internal volumes
  # that are shared by all of the players.
  intrinsic_volume 'int',
}

# Per-player market state.
struct.PlayerMarketState {
  # This holds data representing the market state for each com-
  # modity, but does not apply for rum, cigars, cloth, and coats,
  # since they have a separate model.
  commodities 'refl::enum_map<e_commodity, PlayerMarketItem>',
}

# Market state that is shared by all players.
struct.GlobalMarketState {
  commodities 'refl::enum_map<e_commodity, GlobalMarketItem>',
}
