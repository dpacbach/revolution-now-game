# ===============================================================
# colony.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2020-11-13.
#
# Description: RDS definitions for the colony module.
#
# ===============================================================
# Revolution Now
include "colony-id.hpp"
include "commodity.hpp"
include "coord.hpp"
include "maybe.hpp"
include "unit-id.hpp"

# Rds
include "nation.rds.hpp"
include "config/colony-enums.rds.hpp"
include "config/unit-type.rds.hpp"

# refl
include "refl/enum-map.hpp"

# C++ standard library
include "<string>"
include "<unordered_map>"
include "<unordered_set>"

namespace "rn"

struct.OutdoorUnit {
  unit_id 'UnitId',
  job     'e_outdoor_job',
}

# FIXME: do we need this?
sumtype.ColonyJob {
  outdoor {
    direction 'e_direction',
    job       'e_outdoor_job',
  },
  indoor {
    job       'e_indoor_job',
  },
}

sumtype.Construction {
  building {
    what 'e_colony_building',
  },
  unit {
    type 'e_unit_type',
  }
}

namespace "rn.wrapped"

struct.Colony {
  # Basic info.
  id 'ColonyId',
  nation 'e_nation',
  name 'std::string',
  location 'Coord',

  # Commodities.
  commodities 'refl::enum_map<e_commodity, int>',

  # This is a vector and not a set because it is desirable to
  # preserve the order in which units are added for UI purposes.
  indoor_jobs 'refl::enum_map<e_indoor_job, std::vector<UnitId>>',

  outdoor_jobs 'refl::enum_map<e_direction, maybe<OutdoorUnit>>',

  buildings 'refl::enum_map<e_colony_building, bool>',

  # What building is the colony currently constructing.
  construction 'maybe<Construction_t>',

  hammers 'int',

  # How many bells this colony has accumulated. A certain number
  # of bells generated in a turn are consumed by colonists, and
  # the remainder (which might be negative) is added to this.
  # Then, the value this ends up having each turn determines the
  # percentage of Sons of Liberty membership by comparing its
  # value to the population size (the formula used for this is
  # not yet clear).
  bells 'int',

  _features { equality, validation }
}
