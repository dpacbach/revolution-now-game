# ===============================================================
# colony.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2020-11-13.
#
# Description: RDS definitions for the colony module.
#
# ===============================================================
# Revolution Now
include "colony-id.hpp"
include "colony-mfg.hpp"
include "commodity.hpp"
include "coord.hpp"
include "maybe.hpp"
include "unit-id.hpp"

# Rds
include "nation.rds.hpp"

# refl
include "refl/enum-map.hpp"

# C++ standard library
include "<string>"
include "<unordered_map>"
include "<unordered_set>"

namespace "rn"

sumtype.ColonyJob {
  land {
    d 'e_direction',
    producing 'e_commodity',
  },
  mfg {
    mfg_job 'e_mfg_job',
  },
}


namespace "rn.wrapped"

struct.Colony {
  # Basic info.
  id 'ColonyId',
  nation 'e_nation',
  name 'std::string',
  location 'Coord',

  # Commodities.
  commodities 'refl::enum_map<e_commodity, int>',

  # Serves to both record the units in this colony as well as
  # their occupations.
  units 'std::unordered_map<UnitId, ColonyJob_t>',
  buildings 'std::unordered_set<e_colony_building>',

  # Production
  production 'maybe<e_colony_building>',
  prod_hammers 'int',

  # How many bells this colony has accumulated. A certain number
  # of bells generated in a turn are consumed by colonists, and
  # the remainder (which might be negative) is added to this.
  # Then, the value this ends up having each turn determines the
  # percentage of Sons of Liberty membership by comparing its
  # value to the population size (the formula used for this is
  # not yet clear).
  bells 'int',

  _features { equality, validation }
}
