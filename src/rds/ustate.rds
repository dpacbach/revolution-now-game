# ===============================================================
# ustate.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2020-11-13.
#
# Description: RDS definitions for the ustate module.
#
# ===============================================================
include [
  # Revolution Now
  src/coord.hpp
  src/id.hpp
  src/unit.hpp

  # Flatbuffers
  fb/sg-unit_generated.h
  fb/unit_generated.h

  # C++ standard library
  <unordered_map>
]

namespace rn {

# These pertain to units who are owned by either the high seas or
# by europe view (e.g., in port, on the dock, etc.);
sumtype UnitOldWorldViewState {
  # For ships that are venturing to europe. `percent` starts from
  # 0 and goes to 1.0 at arrival. This means that the value
  # should never actually assume a value of 1.0, because as soon
  # as it does, the state is transitioned to in_port.
  outbound {
    percent: double
  }

  # For ships that are traveling from europe to the new world.
  # `percent` starts from 0 and goes to 1.0 at arrival. This
  # means that the value should never actually assume a value of
  # 1.0, because as soon as it does, the state is transitioned to
  # the map.
  inbound {
    percent: double
  }

  # If a ship is in this state then it is in port (shown in the
  # "in port" box) whereas for land units this means that they
  # are on the dock.
  in_port {}

  _features [
    serializable,
    equality
  ]
}

sumtype UnitState {
  free {}
  world {
    coord: Coord
  }
  cargo {
    holder: UnitId
  }
  old_world {
    st: UnitOldWorldViewState_t
  }
  colony {
    id: ColonyId
  }

  _features [serializable, equality]
}

namespace state {

struct Units {
  next_unit_id:  int
  units:        'std::unordered_map<UnitId, Unit>'
  states:       'std::unordered_map<UnitId, UnitState_t>'
}

} # namespace state

} # namespace rn
