# ===============================================================
# testing.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2020-11-02.
#
# Description: RDS definitions for unit testing.
#
# ===============================================================
include [
  # Revolution Now
  maybe.hpp

  # This is included because MyVariant2 is serializable.
  fb/testing_generated.h

  # C++ standard library
  <string>
  <vector>
]

namespace rdstest {

# Descriptive comment.
sumtype Maybe _template [T]
sumtype Maybe {
  nothing {}
  just { val: T }
}

sumtype MyVariant0 {}

# Descriptive comment.
sumtype MyVariant1 {
  # hello
  happy {
    # hello
    p: 'std::pair<char, int>'
  }
  sad {
    hello: bool
    # hello
    ptr:   'bool*'
  }
  excited {}
}
sumtype MyVariant1 _features [equality]

sumtype MyVariant2 {
  first {
    name: 'std::string'
    b: bool
  }
  second {
    flag1: bool
    flag2: bool
  }
  third {
    cost: int
  }
}
sumtype MyVariant2 _features [formattable, serializable]

namespace inner {

sumtype MyVariant3 {
  a1 {
    var0: MyVariant0_t
  }
  a2 {
    var1: MyVariant0_t
    var2: MyVariant2_t
  }
  a3 {
    c: char
  }
}

# Descriptive comment.
sumtype MyVariant4 {
  # Alternatives.
  first {
    i:  int
    c:  char
    b:  bool
    op: 'rn::maybe<uint32_t>'
  }
  _2nd {}
  third {
    s:    'std::string'
    var3: MyVariant3_t
  }
}

# Descriptive comment.
sumtype TemplateTwoParams _template [T, U]
sumtype TemplateTwoParams {
  # Alternatives.
  first_alternative {
    t: T
    c: char
  }
  second_alternative {}
  third_alternative {
    hello: 'Maybe_t<T>'
    u: U
  }
}

# This one has two template parameters are references another
# sumtype that also has two parameters.
sumtype CompositeTemplateTwo _template [T, U]
sumtype CompositeTemplateTwo {
  first {
    ttp: 'rdstest::inner::TemplateTwoParams_t<T,U>'
  }
  second {}
}

} # namespace inner
} # namespace rdstest

namespace rn {

sumtype MySumtype {
  none {}
  some {
    s: 'std::string'
    y: int
  }
  more {
    d: double
  }

  _features [
    equality
    formattable
    serializable
  ]
}

sumtype OnOffState {
  off {}
  on {
    user: 'std::string'
  }
  switching_on {
    percent: double
  }
  switching_off {
    percent: double
  }

  _features [
    equality,
    formattable,
    serializable
  ]
}

sumtype OnOffEvent {
  turn_off {}
  turn_on  {}
}

# hello
enum e_empty  []
enum e_single [hello]
enum e_two    [hello, world]
enum e_color  [red, green, blue]
enum e_hand   [left, right]

struct EmptyStruct {}

struct EmptyStruct2 {
  _features: []
}

struct MyStruct {
  xxx: int
  yyy: double
  zzz_map: 'std::unordered_map<std::string, std::string>'
}

struct StructWithValidation {
  xxx: int
  yyy: double

  _features: [equality, validation]
}

namespace test {

struct.MyTemplateStruct._template [T, U]
struct MyTemplateStruct {
  xxx: T
  yyy: double
  zzz_map: 'std::unordered_map<std::string, U>'
}

} # namespace test

} # namespace rn