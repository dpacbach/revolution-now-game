# ===============================================================
# colony-evolve.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-06-04.
#
# Description: Rds definitions for the colony-evolve module.
#
# ===============================================================
# Revolution Now
include "maybe.hpp"
include "production.rds.hpp"

# gs
include "gs/colony.rds.hpp"
include "gs/commodity.rds.hpp"
include "gs/unit-id.hpp"

# C++ standard library
include "<vector>"

namespace "rn"

sumtype.ColonyNotification {
  new_colonist {
    id 'UnitId',
  },
  colonist_starved {
    # Here we only give the unit type since by the time someone
    # reads this message, the unit will already have been
    # deleted.
    type 'e_unit_type',
  },
  spoilage {
    spoiled 'std::vector<Commodity>',
  },
  full_cargo {
    what 'e_commodity',
  },
  construction_missing_tools {
    what 'Construction_t',
    have_tools 'int',
    need_tools 'int',
  },
  construction_complete {
    what 'Construction_t',
  },
  construction_already_finished {
    what 'Construction_t',
  },
}

struct.ColonyEvolution {
  # The list of notifications that will be presented to the user
  # in sequence for this colony. The messages presented to the
  # user are specified elsewhere. Each one will give the user the
  # ability to zoom into the colony screen if desired.
  notifications 'std::vector<ColonyNotification_t>',

  production 'ColonyProduction',

  # If the colony finished construction of a building (not a
  # unit) then this will contain the building that was added.
  # This is so that if the user opens the colony view in response
  # to the message it can animate the construction of the build-
  # ing.
  built 'maybe<e_colony_building>',
}
