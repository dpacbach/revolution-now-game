# ===============================================================
# player.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-02-11.
#
# Description: RDS definitions for the player module.
#
# ===============================================================
# Rds
include "nation.rds.hpp"
include "fathers.rds.hpp"
include "utype.rds.hpp"

# refl
include "refl/enum-map.hpp"

# C++ standard library
include "<vector>"

namespace "rn.wrapped"

struct.Player {
  # Somewhat just for convenience.
  nation 'e_nation',

  human 'bool',

  money 'int',

  # How many crosses has this player accumulated. Note that this
  # gets subtracted from each time a new immigrant arrives on the
  # docks, so it is not cumulative beyond that. The number of
  # crosses needed to produce an immigrant depends on a number of
  # factors, plus some randomness.
  crosses 'int',

  # At any given time there are three immigrants in the pool who
  # are considering to come.
  immigrants_pool 'std::vector<e_unit_type>',

  # This is NOT the exact cost of recruiting the next immigrant,
  # it is just a base value which must be added to the (normally
  # calculated) cost. The reason for this is that the cost of an
  # immigrant cannot be computed simply from the instantaneous
  # values of the usual inputs (i.e., current number of crosses,
  # current number units, current number of units on dock, etc.)
  # because it must increase each time the player pays the re-
  # cruitment cost, at least until the next immigration that is
  # earned through crosses. Once the next immigration happens
  # that is earned through cross accumulation (alone) then this
  # value gets reset to zero. This seems to be the way the orig-
  # inal game works (increasing this by 20 per recruitment) prob-
  # ably to make it more difficult to just recruit a large number
  # of immigrants at once.
  next_recruit_cost_base 'int',

  # When the new world is first discovered this will have a value
  # and will be the name given to the new world by the player.
  discovered_new_world 'maybe<std::string>',

  independence_declared 'bool',

  # Which founding fathers does this player have.
  fathers 'refl::enum_map<e_founding_father, bool>',
}
