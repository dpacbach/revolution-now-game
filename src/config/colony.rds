# ===============================================================
# colony.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-06-06.
#
# Description: Config info for colonies (non-production).
#
# ===============================================================
# gs
include "ss/colony-enums.rds.hpp"
include "ss/unit-type.rds.hpp"
include "ss/fathers.rds.hpp"
include "ss/commodity.rds.hpp"
include "ss/difficulty.rds.hpp"

# gfx
include "gfx/pixel.hpp"

# refl
include "refl/enum-map.hpp"
include "refl/to-str.hpp"

# cdr
include "cdr/ext-base.hpp"
include "cdr/ext-builtin.hpp"
include "cdr/ext-std.hpp"

# base
include "base/maybe.hpp"

# C++ standard library
include "<string>"
include "<unordered_map>"

namespace "rn.config.colony"

struct.warehouses {
  # Maximum amount of non-food quantity of a commodity that can
  # be stored in a colony with no warehouses.
  default_max_quantity 'int',

  # Maximum amount of non-food quantity of a commodity that can
  # be stored in a colony with a warehouse.
  warehouse_max_quantity 'int',

  # Maximum amount of non-food quantity of a commodity that can
  # be stored in a colony with a warehouse expansion.
  warehouse_expansion_max_quantity 'int',

  # The original game doesn't seem to impose a limit on the
  # amount of food that can be stored. This is to allow exceeding
  # 100 without a warehouse in order to get to 200 which is
  # needed to create a new colonist (and creating a new colonist
  # at 100 made it too easy).
  commodities_with_warehouse_limit 'refl::enum_map<e_commodity, bool>',

  _features { validation, equality }
}

struct.outdoors {
  job_names 'refl::enum_map<e_outdoor_job, std::string>',
}

# How many of each are needed for a given construction project.
struct.construction_requirements {
  hammers 'int',
  tools   'int',

  # If a building is required for this. In that case, the
  # building itself and any higher building in the same slot will
  # suffice as well.
  required_building 'base::maybe<e_colony_building>',

  # Colonies with a population less than this will not see the
  # option to build this item.
  minimum_population 'int',

  # Is a founding father required for this building.
  required_father 'base::maybe<e_founding_father>',

  # Does this item require an adjacent water tile. Note that the
  # water tile does not have to have ocean access, but must be
  # immediately adjacent in any direction.
  requires_water 'bool',

  _features { validation, equality }
}

struct.on_the_job_training {
  # If the given unit type can be auto-promoted via on-the-job
  # training then this will give the probability, which is ap-
  # plied independently to every unit every turn.
  probabilities 'std::unordered_map<e_unit_type, double>',

  # Which indoor jobs are eligible for auto promotion.
  eligible_indoor_jobs 'refl::enum_map<e_indoor_job, bool>',

  # Which outdoor jobs are eligible for auto promotion.
  eligible_outdoor_jobs 'refl::enum_map<e_outdoor_job, bool>',

  # In the original game, a unit can be promoted even when it is
  # working in a square that is not producing anything. This
  # could be a bug, and doesn't make much sense, so this game
  # will not allow that. But this flag allows turning it back on
  # if compatibility is desired.
  can_promote_with_zero_production 'bool',

  _features { validation, equality }
}

struct.colors {
  # In addition to a black shadow behind the unit (to the left),
  # we render a one-pixel "glow" on the right side of the unit
  # for ease of discerning the unit over the background terrain.
  outdoor_unit_glow_color 'gfx::pixel',

  # Units that are on a lighter background (such as indoor units)
  # that don't need as pronounced of a shadow color will get this
  # shadow color.
  unit_shadow_color_light 'gfx::pixel',
}

namespace "rn"

# Note that this config is for non-production related things. For
# production-related things there is a dedicated config file.
struct.config_colony_t {
  warehouses 'config::colony::warehouses',

  food_for_creating_new_colonist 'int',

  # The maximum number of people that be placed in each (indoor)
  # colony building.
  max_workers_per_building 'int',

  # Which colony buildings are given automatically to a colony
  # upon founding.
  initial_colony_buildings 'refl::enum_map<e_colony_building, bool>',

  outdoors 'config::colony::outdoors',

  # All buildings are theoretically buildable, and this will
  # specify how many hammers and tools are needed for each.
  requirements_for_building 'refl::enum_map<e_colony_building, config::colony::construction_requirements>',

  # This gives the list of units that are buildable in a colony
  # as well as how many hammers and tools are needed for each.
  requirements_for_unit 'refl::enum_map<e_unit_type, base::maybe<config::colony::construction_requirements>>',

  # For a given difficulty level, this gives the size N of the
  # tory population which, when met or exceeded, causes a produc-
  # tion penalty to apply. Moreover, the production penalty will
  # be applied multiple times for each multiple of N reached by
  # the tory population. Note that this has nothing to do with
  # overall colony size since it is not based on percentages; it
  # only pertains to the absolute size of the tory population.
  tory_penalty_population 'refl::enum_map<e_difficulty, int>',

  # This is a percent bonus in [0.0, 1.0] that will be added to
  # each colony's SoL percentage after acquiring Simon Bolivar.
  # In the original game it is 0.2.
  bolivar_sons_of_liberty_bonus 'double',

  # This is the (fractional) number of bells consumed by each
  # (fractional) rebel in a colony each turn. Any surplus goes
  # toward converting more tories to rebels. In the original game
  # it is 2.0. Increasing this number will make it more difficult
  # to raise Sons of Liberty membership.
  bells_consumed_per_rebel 'double',

  # This is the (positive) value of the penalty that will be sub-
  # tracted from all colonists production for each multiple N of
  # tories, where N is determined by the difficulty level. In the
  # original game it is 1. But note that this penalty will not
  # always manifest as precisely one unit reduction in produc-
  # tion, since e.g. for indoor workers it is subtracted before
  # other multipliers are applied. Also, note that in the orig-
  # inal game, the tory penalty does not seem to get applied to
  # the center square (though SoL bonuses do); in this game, we
  # apply it equally to all squares, including the center square,
  # since there doesn't seem to be a logical reason not to.
  tory_production_penalty 'int',

  # These are the production bonuses that are applied in a colony
  # when Sons of Liberty percent hits 50% and 100%, respectively.
  # In the original game they appear to be the same for both in-
  # door and outdoor workers, but differ between experts (2 and
  # 4) and non-experts (1 and 2). Note that, for indoor jobs,
  # these bonuses will not always manifest as precisely that in-
  # crease in production, since e.g. for indoor workers it is
  # added before other multipliers are applied. The original game
  # seems to make a few exceptions to the outdoor bonuses; namely
  # the center square only gets 1/2, and lumberjacks seemingly
  # have the bonus applied in a different order. In this game,
  # for simplicity, we will apply these equally to all squares
  # and all occupations, including the center square.
  sons_of_liberty_50_bonus_non_expert 'int',
  sons_of_liberty_50_bonus_expert 'int',
  sons_of_liberty_100_bonus_non_expert 'int',
  sons_of_liberty_100_bonus_expert 'int',

  building_display_names 'refl::enum_map<e_colony_building, std::string>',

  colors 'config::colony::colors',

  # Configures how/when units working in colonies get randomly
  # promoted via on-the-job-training.
  on_the_job_training 'config::colony::on_the_job_training',

  _features { validation, equality }
}

config.colony {}
