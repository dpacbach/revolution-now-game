# ===============================================================
# old-world-state.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-05-27.
#
# Description: Per-player old world state.
#
# ===============================================================
# gs
include "gs/commodity.rds.hpp"
include "gs/unit-id.hpp"
include "gs/unit-type.rds.hpp"

# refl
include "refl/enum-map.hpp"

# base
include "base/maybe.hpp"

# C++ standard library
include "<array>"

namespace "rn"

struct.MarketItem {
  # When multiplied by 100 this is the price that you get when
  # selling 100 tons of a commodity in Europe (that would be at
  # zero tax rate; since taxes are subtracted, you will generally
  # get less than this).
  #
  # In the original game the spread (buy-sell) is fixed for each
  # commodity. Most have a spread of 100, while some have a very
  # large spread (e.g. food has a spread of 800). Not sure why,
  # but that is the reason that we don't have a buy price here,
  # since it can always be inferred from this.
  #
  # In particular, the sell price is always less than the buy
  # price. This may be in order to prevent making a quick profit
  # by buying something, causing the price to rise, and then im-
  # mediately selling it back, but not sure.
  #
  # In the original game this was always in the range [1, 19].
  sell_price_in_hundreds 'int',

  # Is there an active boycott for this.
  boycott 'bool',

  # Price movement pressure. Starts off at zero, then when com-
  # modities are purchased this will increase, and when they are
  # sold it will decrease. When it hits 1.0 (-1.0) the price will
  # increase (decrease) by 1 and this will be reset to zero.
  #
  # This can also be modified independently of player trading ac-
  # tivity since prices in Europe will fluctuate due to sup-
  # ply/demand within Europe. The mechanics of said supply/demand
  # are commodity-dependent and may be driven partly by some
  # gameplay balancing logic as well as some randomness.
  #
  # It seems sensible that this value should be modified in such
  # a way that, in the following situation:
  #
  #   * Tax rate is zero.
  #   * Bid/ask spread is zero.
  #   * Player has infinite gold.
  #
  # that the player should neither gain nor lose any gold on av-
  # erage by alternatively buying/selling the good (in any quan-
  # tities).
  price_movement 'double',

  _features { equality, validation }
}

struct.MarketState {
  commodities 'refl::enum_map<e_commodity, MarketItem>',
}

# How many of each unit the king has added into his expeditionary
# force. These will grow as the game progresses.
struct.ExpeditionaryForce {
  regulars   'int',
  cavalry    'int',
  artillery  'int',
  men_of_war 'int',

  _features { equality, validation }
}

# The state of the harbor view UI.
struct.HarborState {
  # TODO: should add validation that this unit exists.
  selected_unit 'base::maybe<UnitId>',
}

# The state of things related to immigration on the europe side.
struct.ImmigrationState {
  # At any given time there are three immigrants in the pool who
  # are considering to come. Note that one or more of these three
  # unit types can be the same type. The unit types must be human
  # types (no ships, no artillery, no wagon trains, etc.) and
  # must be non-revolutionary types.
  immigrants_pool 'std::array<e_unit_type, 3>',

  # This is NOT the exact cost of recruiting the next immigrant,
  # it is just a base value which must be added to the (normally
  # calculated) cost. The reason for this is that the cost of an
  # immigrant cannot be computed simply from the instantaneous
  # values of the usual inputs (i.e., current number of crosses,
  # current number units, current number of units on dock, etc.)
  # because it must increase each time the player pays the re-
  # cruitment cost, at least until the next immigration that is
  # earned through crosses. Once the next immigration happens
  # that is earned through cross accumulation (alone) then this
  # value gets reset to zero. This seems to be the way the orig-
  # inal game works (increasing this by 20 per recruitment) prob-
  # ably to make it more difficult to just recruit a large number
  # of immigrants at once.
  next_recruit_cost_base 'int',

  _features { equality, validation }
}

# State of the current tax rate and movement thereof.
struct.TaxationState {
  # Tax rate (%) imposed by the king: [0, 100].
  tax_rate 'int',

  _features { equality, validation }
}

# This holds the state of old-world related things. That
# includes:
#
#   * The harbor UI state.
#   * The state of the king and parent country.
#   * The prices of commodities in the old world.
#   * The size of the expeditionary force.
#
# It is not a
# top-level state because there is one for each player, so it is
# more natural to just embed it in the Player object. That said,
# it is also nice to have it in its own struct grouping.
struct.OldWorldState {
  harbor_state 'HarborState',

  # At any given time there are three immigrants in the pool who
  # are considering to come.
  immigration 'ImmigrationState',

  # All things taxes.
  taxes 'TaxationState',

  # The commodity market.
  market 'MarketState',

  # Royal expeditionary force.
  expeditionary_force 'ExpeditionaryForce',
}
