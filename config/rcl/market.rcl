# ---------------------------------------------------------------
# There are two market models (governing price movement) in the
# original game: one for the four processed goods (rum, cigars,
# cloth, coats), and one for the remainder. The former we will
# refer to as the "processed goods model" and the latter the "de-
# fault model."
#
# The default model used here along with the associated configu-
# ration parameters are essentially taken/inferred from the orig-
# inal game's NAMES.TXT file in the section titled "Cargo types &
# economic model" together with some experimentation.
#
# In the default model, the OG appears to keep track of the total
# net volume of a commodity in europe (i.e., it increases when a
# commodity is sold to europe and decreases when it is bought).
# It then manipulates that number as commodities are bought and
# sold, as well as applying an "attrition" (drift) each turn.
#
# Default Model
# =============
#
# Rise/Fall: This is the amount by which the net volume must de-
# crease (increase) in order for the price to go up (down) by
# one. In the original game's config file these were in multiples
# of 100, but here they are not. Note that when using these vol-
# umes to compute price changes, the volume will be scaled up or
# down first depending on difficulty level in such a way as to
# make prices less (more) volatile on easier (harder) difficulty
# levels.
#
# Attrition: This is the amount added to the net volume each turn
# to allow the price to drift. If this is negative (positive)
# then the price will tend to increase (decrease) when nothing is
# traded. The actual attrition value will be scaled when playing
# as the dutch.
#
# Volatility: The original game's config file describes this
# field as the "shift value for traffic volume." Experiments in-
# dicate that it literally represents the number of times to left
# shift (i.e., bit shift) a traded amount before adding it onto
# the accumulated traffic. So e.g., a value of 2 for this field
# would mean that, if the player sells 50 of a commodity, then
# 50<<2 = 50*4 = 200 will actually be added (since it is a sell)
# to the total traffic. This makes the price more responsive to
# traffic (more volatile in that sense).
#
# Dutch: the dutch get their traffic volumes scaled down and
# their attrition magnitude scaled up when computing price
# changes This puts things more in their favor in both situa-
# tions.
#
# Difficulty level: depending on the difficulty level, the
# traffic volume (i.e., explicitly traded by the player) gets
# scaled up or down to make price swings more/less pronounced.
#
# Ordering: There are various bonuses/penalties involved in the
# default model, but what's nice is that they are all multiplica-
# tive (even the volatility "shift"), and so it does not matter
# in what order they are applied.
#
# Processed Goods Model
# =====================
#
# This model is quite different from the default model, and is
# described elsewhere. In short, for that model, there are two
# volumes maintained, and the (equilibrium) prices of the goods
# are derived from the volumes using a somewhat complicated
# process whose goal is to try to keep the average price of the
# four goods afloat; e.g. when one good is sold, its price falls
# but the others rise.
# ---------------------------------------------------------------

# Describes the properties and price movement model for each
# market commodity. Note: in the original game's config file, the
# values representing price limits appear to be equal to the bid
# price + 1, regardless of the bid/ask spread. So e.g. food is
# listed as having a min/max price of 1 and 6; if these repre-
# sented real ask prices then it wouldn't make any sense because
# food has a bid/ask spread of 8, and so that would put the bid
# price below zero. So in reality that means that the limits are
# 0/5 on the bid price, and 8/13 on the ask. In this config
# though, we always refer to bid prices to keep it simple.
price_behavior {
  food {
    # original game: 1,  3,  1,  6,  7,  3,  2, -1,  0
    price_limits {
      bid_price_start_min:  0
      bid_price_start_max:  2
      bid_price_min:        0
      bid_price_max:        5
      bid_ask_spread:       8
    }
    economic_model {
      rise:                 300
      fall:                 200
      attrition:           -1
      volatility:           0
    }
  }

  sugar {
    # original game: 4,  7,  3,  7,  1,  4,  6, -8,  1
    price_limits {
      bid_price_start_min:  3
      bid_price_start_max:  6
      bid_price_min:        2
      bid_price_max:        6
      bid_ask_spread:       2
    }
    economic_model {
      rise:                 400
      fall:                 600
      attrition:           -8
      volatility:           1
    }
  }

  tobacco {
    # original game: 3,  5,  2,  5,  1,  4,  8,-10,  1
    price_limits {
      bid_price_start_min:  2
      bid_price_start_max:  4
      bid_price_min:        1
      bid_price_max:        4
      bid_ask_spread:       2
    }
    economic_model {
      rise:                 400
      fall:                 800
      attrition:           -10
      volatility:           1
    }
  }

  cotton {
    # original game: 2,  5,  2,  5,  1,  4,  6,-11,  1
    price_limits {
      bid_price_start_min:  1
      bid_price_start_max:  4
      bid_price_min:        1
      bid_price_max:        4
      bid_ask_spread:       2
    }
    economic_model {
      rise:                 400
      fall:                 600
      attrition:           -11
      volatility:           1
    }
  }

  fur {
    # original game: 4,  6,  2,  6,  1,  4, 20,-13,  1
    price_limits {
      bid_price_start_min:  3
      bid_price_start_max:  5
      bid_price_min:        1
      bid_price_max:        5
      bid_ask_spread:       2
    }
    economic_model {
      rise:                 400
      fall:                 2000
      attrition:           -13
      volatility:           1
    }
  }

  lumber {
    # original game: 2,  2,  2,  2,  4,  3,  2,  0,  0
    price_limits {
      bid_price_start_min:  1
      bid_price_start_max:  1
      bid_price_min:        1
      bid_price_max:        1
      bid_ask_spread:       5
    }
    economic_model {
      rise:                 300
      fall:                 200
      attrition:            0
      volatility:           0
    }
  }

  ore {
    # original game: 3,  6,  2,  6,  2,  2,  4, -7,  0
    price_limits {
      bid_price_start_min:  2
      bid_price_start_max:  5
      bid_price_min:        1
      bid_price_max:        5
      bid_ask_spread:       3
    }
    economic_model {
      rise:                 200
      fall:                 400
      attrition:           -7
      volatility:           0
    }
  }

  silver {
    # original game: 20,  20,  2, 20,  0,  8,  1, -8,  2
    price_limits {
      bid_price_start_min:  19
      bid_price_start_max:  19
      bid_price_min:        1
      bid_price_max:        19
      bid_ask_spread:       1
    }
    economic_model {
      rise:                 800
      fall:                 100
      attrition:           -8
      volatility:           2
    }
  }

  horses {
    # original game: 2,  3,  2, 11,  0,  3,  2, -3,  0
    price_limits {
      bid_price_start_min:  1
      bid_price_start_max:  2
      bid_price_min:        1
      bid_price_max:        10
      bid_ask_spread:       1
    }
    economic_model {
      rise:                 300
      fall:                 200
      attrition:           -3
      volatility:           0
    }
  }

  rum {
    # These fields are here for completeness since the OG's
    # config file provided them, but they are ignored, as the
    # four processed commodities use a separate market model.
    # original game: 11, 13,  1, 20,  0,  4,  4,-12,  1
    price_limits {
      bid_price_start_min:  10
      bid_price_start_max:  12
      bid_price_min:        0
      bid_price_max:        19
      bid_ask_spread:       1
    }
    economic_model {
      rise:                 400
      fall:                 400
      attrition:           -12
      volatility:           1
    }
  }

  cigars {
    # These fields are here for completeness since the OG's
    # config file provided them, but they are ignored, as the
    # four processed commodities use a separate market model.
    # original game: 11, 13,  1, 20,  0,  4,  4,-11,  1
    price_limits {
      bid_price_start_min:  10
      bid_price_start_max:  12
      bid_price_min:        0
      bid_price_max:        19
      bid_ask_spread:       1
    }
    economic_model {
      rise:                 400
      fall:                 400
      attrition:           -11
      volatility:           1
    }
  }

  cloth {
    # These fields are here for completeness since the OG's
    # config file provided them, but they are ignored, as the
    # four processed commodities use a separate market model.
    # original game: 11, 13,  1, 20,  0,  4,  4,-13,  1
    price_limits {
      bid_price_start_min:  10
      bid_price_start_max:  12
      bid_price_min:        0
      bid_price_max:        19
      bid_ask_spread:       1
    }
    economic_model {
      rise:                 400
      fall:                 400
      attrition:           -13
      volatility:           1
    }
  }

  coats {
    # These fields are here for completeness since the OG's
    # config file provided them, but they are ignored, as the
    # four processed commodities use a separate market model.
    # original game: 11, 13,  1, 20,  0,  4,  4,-11,  1
    price_limits {
      bid_price_start_min:  10
      bid_price_start_max:  12
      bid_price_min:        0
      bid_price_max:        19
      bid_ask_spread:       1
    }
    economic_model {
      rise:                 400
      fall:                 400
      attrition:           -11
      volatility:           1
    }
  }

  trade_goods {
    # original game: 2,  3,  2, 12,  0,  2,  3,  4,  0
    price_limits {
      bid_price_start_min:  1
      bid_price_start_max:  2
      bid_price_min:        1
      bid_price_max:        11
      bid_ask_spread:       1
    }
    economic_model {
      rise:                 200
      fall:                 300
      attrition:            4
      volatility:           0
    }
  }

  tools {
    # original game: 2,  2,  2,  9,  0,  2,  2,  5,  0
    price_limits {
      bid_price_start_min:  1
      bid_price_start_max:  1
      bid_price_min:        1
      bid_price_max:        8
      bid_ask_spread:       1
    }
    economic_model {
      rise:                 200
      fall:                 200
      attrition:            5
      volatility:           0
    }
  }

  muskets {
    # original game: 3,  3,  2, 20,  0,  2,  2,  6,  0
    price_limits {
      bid_price_start_min:  2
      bid_price_start_max:  2
      bid_price_min:        1
      bid_price_max:        19
      bid_ask_spread:       1
    }
    economic_model {
      rise:                 200
      fall:                 200
      attrition:            6
      volatility:           0
    }
  }
}

# Models/configures the nation-specific bonuses with regard to
# trading, which in the original game only applies to the Dutch,
# as it does in this game (by default).
nation_advantage {
  english {
    # No bonuses/penalties.
    attrition_scale:   1.0
    sell_volume_scale: 1.0
    buy_volume_scale:  1.0
  }

  french {
    # No bonuses/penalties.
    attrition_scale:   1.0
    sell_volume_scale: 1.0
    buy_volume_scale:  1.0
  }

  spanish {
    # No bonuses/penalties.
    attrition_scale:   1.0
    sell_volume_scale: 1.0
    buy_volume_scale:  1.0
  }

  # Of the Dutch, the original game states that "Commodity prices
  # in Amsterdam do not collapse as quickly as in other European
  # ports and they recover more quickly.
  dutch {
    # This is the "recover more quickly" part. In this case, "re-
    # cover" seems to mean that the prices recover to values that
    # are typically favorable to players; in some cases that can
    # mean rise, and in others fall. Specifically, experiments on
    # the original game seem to indicate that the dutch have
    # their "attrition" values scaled up, so that, in the absence
    # of trading with the new world, prices naturally either rise
    # or fall (depending on the sign of the attrition) more
    # quickly. This may at first seem more like a disadvantage,
    # but it is actually an advantage because the sign of the at-
    # trition (in general) is chosen to make it favorable for the
    # player. E.g., tools and muskets, which are normally bought
    # by the player, have a positive attrition, so their prices
    # would gradually drop, which is favorable to the player.
    # Thus, as mentioned, we multiply the dutch's attrition value
    # (keeping the same sign) by this factor, which, in the orig-
    # inal game appears to be 1/(2/3)=1.5, since the price move-
    # ments appear to happen in about 2/3 the number of turns.
    attrition_scale: 1.5

    # This is the "do not collapse as quickly" part. In this
    # case, it refers only to price drops (not price rises) and
    # it appears to only apply when selling goods, not when at-
    # trition is applied (on goods with positive attrition,
    # meaning that they normally fall when left alone). Experi-
    # ments in the original game seem to indicate that when
    # selling goods in europe, the volume sold is scaled down by
    # a factor of 2/3 before it is added to the net traffic vol-
    # ume. This results in taking 1.5 times the number of turns
    # to cause a price drop when selling. Note that the "fall"
    # parameter for each commodity does not seem to be changed
    # per se, since when commodities with positive attrition
    # (falling) are let to evolve (with the Dutch's scaled attri-
    # tion) the game appears to use the unmodififed "fall" num-
    # ber. That probably makes sense, since if the "fall" number
    # were scaled up in order to delay price falling, then it
    # would cancel out the scaling up of attrition, so therefore
    # muskets would effectively not get the "price recovery"
    # bonus (which for them means that their price "recovers" to
    # low values more quickly for the dutch). Another reason that
    # the original game might not opt to scale up the "fall" pa-
    # rameter as a means of reducing price collapse is that it
    # could potentially then cause the fall parameter to be sig-
    # nificantly larger than the rise parameter, which might
    # allow a form of cheating where you buy a lot of a commodity
    # (causing the price to rise quickly), then you sell it off
    # immediately while the price drops more slowly, resulting in
    # a profit that might even exceed what is lost via the
    # bid/ask spread. I think that the bid/ask spread together
    # with max values of prices might be sufficient to thwart
    # that mode of cheating, but then if the fall parameter were
    # changed then in theory those other parameters would have to
    # be adjusted to compensate, which is probably too much com-
    # plexity.
    sell_volume_scale: 0.666666

    # In the original game, not even the dutch seem to get a
    # scaling on volume when buying.
    buy_volume_scale: 1.0
  }
}

# Some of the parameters in the economic model are tweaked de-
# pending on difficulty level.
#
# Depending on difficulty level, the traffic volume is scaled
# down by this factor when calculating price rises/falls. This
# effectively causes prices to not rise/fall as quickly as a re-
# sult. Note that this does not affect attrition in either direc-
# tion, only to actual traffic from the new world.
difficulty_modifiers {
  discoverer {
    traffic_volume_scale: 0.666666
  }

  explorer {
    traffic_volume_scale: 0.833333
  }

  conquistador {
    traffic_volume_scale: 1.000000
  }

  governor {
    traffic_volume_scale: 1.166666
  }

  viceroy {
    traffic_volume_scale: 1.333333
  }
}

# The OG's strategy guide describes the idea of "price groups",
# where one price change in one commodity in the group affects
# the others. This price group model is quite different from the
# default model. This particular one governs the group consisting
# of rum, cigars, cloth, and coats.
processed_goods_model {
  bid_price_min: 0
  bid_price_max: 19
  rise_fall:     4
  volatility:    1
  target_price:  12
}
